{"ast":null,"code":"var _jsxFileName = \"/Users/pranaylunavat/Desktop/leetcode-clone-with-better-feedback/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Editor from \"@monaco-editor/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [language, setLanguage] = useState(\"python\");\n  const [userCode, setUserCode] = useState(`# Write your function here\\ndef isPalindrome(s):\\n    import re\\n    filtered = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\\n    return filtered == filtered[::-1]`);\n  const [output, setOutput] = useState(\"\");\n  const [showHint, setShowHint] = useState(false);\n  const testCases = [{\n    input: \"A man, a plan, a canal: Panama\",\n    expected: \"True\"\n  }, {\n    input: \"race a car\",\n    expected: \"False\"\n  }, {\n    input: \" \",\n    expected: \"True\"\n  }];\n  const runCode = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5002/execute\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          language,\n          code: userCode,\n          tests: testCases\n        })\n      });\n      const result = await response.json();\n      setOutput(result.output);\n    } catch (error) {\n      setOutput(\"Error: Unable to connect to the execution server.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"Arial\",\n      maxWidth: \"800px\",\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Valid Palindrome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Write a function that returns True if a string is a palindrome, ignoring non-alphanumeric characters and case.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      height: \"300px\",\n      language: language,\n      value: userCode,\n      onChange: newValue => setUserCode(newValue)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: runCode,\n      style: {\n        marginTop: \"10px\",\n        padding: \"10px\"\n      },\n      children: \"Run Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), output && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\",\n        backgroundColor: \"#f4f4f4\",\n        padding: \"15px\",\n        borderRadius: \"8px\",\n        maxHeight: \"300px\",\n        overflowY: \"auto\",\n        whiteSpace: \"pre-wrap\",\n        wordWrap: \"break-word\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginBottom: \"10px\"\n        },\n        children: \"Output and AI Feedback:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          margin: 0\n        },\n        children: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"L5NbYuavhAfqLf+4CIP0716LYAw=\");\n_c = App;\n/*#__PURE__*/_jsxDEV(\"div\", {\n  onClick: () => setShowHint(!showHint),\n  style: {\n    marginTop: \"20px\",\n    backgroundColor: \"#eef\",\n    padding: \"10px 15px\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\",\n    userSelect: \"none\",\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.1)\",\n    transition: \"all 0.3s ease\"\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n    children: \"\\uD83D\\uDCA1 Hint\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }, this), showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: \"10px\",\n      color: \"#333\"\n    },\n    children: \"Try filtering the string to only alphanumeric characters, convert it to lowercase, then compare it with its reverse.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 64,\n  columnNumber: 1\n}, this);\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Editor","jsxDEV","_jsxDEV","App","_s","language","setLanguage","userCode","setUserCode","output","setOutput","showHint","setShowHint","testCases","input","expected","runCode","response","fetch","method","headers","body","JSON","stringify","code","tests","result","json","error","style","padding","fontFamily","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","height","value","onChange","newValue","onClick","marginTop","backgroundColor","borderRadius","maxHeight","overflowY","whiteSpace","wordWrap","marginBottom","_c","cursor","userSelect","boxShadow","transition","color","$RefreshReg$"],"sources":["/Users/pranaylunavat/Desktop/leetcode-clone-with-better-feedback/client/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Editor from \"@monaco-editor/react\";\n\nfunction App() {\n  const [language, setLanguage] = useState(\"python\");\n  const [userCode, setUserCode] = useState(`# Write your function here\\ndef isPalindrome(s):\\n    import re\\n    filtered = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\\n    return filtered == filtered[::-1]`);\n  const [output, setOutput] = useState(\"\");\n  const [showHint, setShowHint] = useState(false);\n\n  const testCases = [\n    { input: \"A man, a plan, a canal: Panama\", expected: \"True\" },\n    { input: \"race a car\", expected: \"False\" },\n    { input: \" \", expected: \"True\" }\n  ];\n\n  const runCode = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5002/execute\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ language, code: userCode, tests: testCases }),\n      });\n      const result = await response.json();\n      setOutput(result.output);\n    } catch (error) {\n      setOutput(\"Error: Unable to connect to the execution server.\");\n    }\n  };\n\n\n  return (\n    <div style={{ padding: \"20px\", fontFamily: \"Arial\", maxWidth: \"800px\", margin: \"auto\" }}>\n      <h1>Valid Palindrome</h1>\n      <p>Write a function that returns True if a string is a palindrome, ignoring non-alphanumeric characters and case.</p>\n\n      <h2>Editor</h2>\n      <Editor\n        height=\"300px\"\n        language={language}\n        value={userCode}\n        onChange={(newValue) => setUserCode(newValue)}\n      />\n\n      <button onClick={runCode} style={{ marginTop: \"10px\", padding: \"10px\" }}>Run Code</button>\n\n      {output && (\n        <div style={{\n          marginTop: \"20px\",\n          backgroundColor: \"#f4f4f4\",\n          padding: \"15px\",\n          borderRadius: \"8px\",\n          maxHeight: \"300px\",\n          overflowY: \"auto\",\n          whiteSpace: \"pre-wrap\",\n          wordWrap: \"break-word\"\n        }}>\n          <h3 style={{ marginBottom: \"10px\" }}>Output and AI Feedback:</h3>\n          <pre style={{ margin: 0 }}>{output}</pre>\n        </div>\n      )}\n    </div>\n  );\n}\n<div\n  onClick={() => setShowHint(!showHint)}\n  style={{\n    marginTop: \"20px\",\n    backgroundColor: \"#eef\",\n    padding: \"10px 15px\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\",\n    userSelect: \"none\",\n    boxShadow: \"0 2px 6px rgba(0,0,0,0.1)\",\n    transition: \"all 0.3s ease\"\n  }}\n>\n  <strong>ðŸ’¡ Hint</strong>\n  {showHint && (\n    <div style={{ marginTop: \"10px\", color: \"#333\" }}>\n      Try filtering the string to only alphanumeric characters, convert it to lowercase, then compare it with its reverse.\n    </div>\n  )}\n</div>\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}